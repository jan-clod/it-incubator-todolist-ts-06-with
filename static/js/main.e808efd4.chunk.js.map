{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","trim","addItem","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Todolist","removeTodoList","todolistID","tasks","map","t","id","isDone","type","changeTaskStatus","checked","newValue","changeTaskTitle","removeTask","filter","changeFilter","App","todolistID1","v1","todolistID2","filtered","todolists","setTodolists","setTasks","taskiId","newTask","changeStatus","taskId","isDoneValue","el","newTitle","todolist","i","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e808efd4.chunk.js","sourcesContent":["import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\ntype AddItemPropsType={\r\n    addItem: ( title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemPropsType){\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n    return <div>\r\n    <input value={title}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressHandler}\r\n        className={error ? \"s.error\" : \"\"}\r\n    />\r\n    <button onClick={addTask}>+</button>\r\n    {error && <div className=\"error-message\">{error}</div>}\r\n</div>\r\n}","import React, { ChangeEvent, useState } from 'react'\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChange:(newValue:string)=>void\r\n}\r\n\r\n\r\nexport const EditableSpan = (props: EditableSpanType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState('')\r\n\r\n    const activateEditeMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = (e:ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <input\r\n            value={title}\r\n            onChange={onChangeTitleHandler}\r\n            onBlur={activateViewMode}\r\n            autoFocus />\r\n        : <span onDoubleClick={activateEditeMode}>{props.title}</span>\r\n}","import React, { ChangeEvent } from 'react';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport { FilterValuesType } from './App';\r\nimport { EditableSpan } from './EditableSpan';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    todolistID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistID: string) => void\r\n    changeFilter: (todolistID: string, value: FilterValuesType) => void\r\n    addTask: (todolistID: string, title: string) => void\r\n    changeTaskStatus: (todolistID: string, taskId: string, isDone: boolean) => void\r\n    changeTaskTitle: (todolistID: string, taskId: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    removeTodoList: (todolistID: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const onAllClickHandler = () => props.changeFilter(props.todolistID, \"all\");\r\n    const onActiveClickHandler = () => props.changeFilter(props.todolistID, \"active\");\r\n    const onCompletedClickHandler = () => props.changeFilter(props.todolistID, \"completed\");\r\n    const removeTodoListHandler = () => props.removeTodoList(props.todolistID)\r\n    const addTask = (title: string) => props.addTask(title, props.todolistID)\r\n\r\n    return <div>\r\n        <h3>\r\n            {props.title}\r\n            <button onClick={removeTodoListHandler}>x</button>\r\n        </h3>\r\n\r\n        <AddItemForm addItem={addTask} />\r\n\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(props.todolistID, t.id)\r\n                    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeTaskStatus(props.todolistID, t.id, e.currentTarget.checked);\r\n                    }\r\n\r\n                    const onChangeTitleHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(props.todolistID, t.id, newValue);\r\n                    }\r\n                    return <p key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <input type=\"checkbox\"\r\n                            onChange={onChangeStatusHandler}\r\n                            checked={t.isDone} />\r\n                        <EditableSpan\r\n                            title={t.title}\r\n                            onChange={onChangeTitleHandler}\r\n                        />\r\n                        <button onClick={onClickHandler}>x</button>\r\n                    </p>\r\n                })\r\n            }\r\n        </div>\r\n        <div>\r\n            <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                onClick={onAllClickHandler}>All</button>\r\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                onClick={onActiveClickHandler}>Active</button>\r\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                onClick={onCompletedClickHandler}>Completed</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { TaskType, Todolist } from './Todolist';\r\nimport { v1 } from 'uuid';\r\nimport { AddItemForm } from './AddItemForm';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\ntype todolistsType = {\r\n    id: string\r\n    title: string\r\n    filtered: FilterValuesType\r\n}\r\ntype tasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nfunction App() {\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<todolistsType>>([\r\n        { id: todolistID1, title: 'What to learn', filtered: 'all' },\r\n        { id: todolistID2, title: 'What to buy', filtered: 'all' },\r\n    ])\r\n    let [tasks, setTasks] = useState<tasksStateType>({\r\n        [todolistID1]: [\r\n            { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n            { id: v1(), title: \"JS\", isDone: true },\r\n            { id: v1(), title: \"ReactJS\", isDone: false },\r\n            { id: v1(), title: \"Rest API\", isDone: false },\r\n            { id: v1(), title: \"GraphQL\", isDone: false },\r\n        ],\r\n        [todolistID2]: [\r\n            { id: v1(), title: \"moloko\", isDone: true },\r\n            { id: v1(), title: \"hleb\", isDone: true },\r\n            { id: v1(), title: \"grechka\", isDone: false },\r\n            { id: v1(), title: \"maslo\", isDone: false },\r\n            { id: v1(), title: \"vino\", isDone: false },\r\n        ]\r\n    });\r\n    function removeTask(todolistID: string, taskiId: string) {\r\n        debugger\r\n        setTasks({ ...tasks, [todolistID]: tasks[todolistID].filter(t => t.id !== taskiId) })\r\n    }  // наш весь массив, [переназначаем содержимое], id2.[id2].filter...  \r\n    function addTask(todolistID: string, title: string) {\r\n        let newTask = { id: v1(), title: title, isDone: false };\r\n        setTasks({ ...tasks, [todolistID]: [newTask, ...tasks[todolistID]] })\r\n    }\r\n    function changeStatus(todolistID: string, taskId: string, isDoneValue: boolean) {\r\n        setTasks({ ...tasks, [todolistID]: tasks[todolistID].map(el => el.id === taskId ? { ...el, isDone: isDoneValue } : el) })\r\n    }\r\n    function changeFilter(todolistID: string, value: FilterValuesType) {\r\n        setTodolists(todolists.map(el => el.id === todolistID ? { ...el, filtered: value } : el));\r\n    }\r\n    const removeTodoList = (todolistID: string) => {\r\n        setTodolists(todolists.filter(el => el.id !== todolistID))\r\n        delete tasks[todolistID]\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        let todolist: todolistsType = {\r\n            id: v1(),\r\n            filtered: \"all\",\r\n            title: title\r\n        }\r\n        setTodolists([todolist, ...todolists])\r\n        setTasks({ ...tasks, [todolist.id]: [] })\r\n    }\r\n    const changeTaskTitle = (todolistID: string, taskId: string, newTitle: string) => {\r\n        setTasks({ ...tasks, [todolistID]: tasks[todolistID].map(el => el.id === taskId ? { ...el, newTitle } : el) })\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList} />\r\n            {todolists.map((el, i) => {\r\n\r\n                let tasksForTodolist = tasks[el.id];\r\n\r\n                if (el.filtered === \"active\") {\r\n                    tasksForTodolist = tasks[el.id].filter(t => t.isDone === false);\r\n                }\r\n                if (el.filtered === \"completed\") {\r\n                    tasksForTodolist = tasks[el.id].filter(t => t.isDone === true);\r\n                }\r\n\r\n                return (\r\n                    <Todolist\r\n                        key={el.id}\r\n                        todolistID={el.id}\r\n                        title={el.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        filter={el.filtered}\r\n                        removeTodoList={removeTodoList}\r\n                    />\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}